{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { BehaviorSubject, catchError, map, tap, throwError } from 'rxjs';\nimport { User } from '../user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ServiceService = /*#__PURE__*/(() => {\n  class ServiceService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.password = null;\n      this.table_name = 'users.json';\n    }\n\n    checkEmail() {\n      return this.http.get(environment.apiUrl + this.table_name).pipe(map(res => {\n        const arr = [];\n\n        for (const r in res) {\n          if (res.hasOwnProperty(r)) {\n            arr.push(Object.assign(Object.assign({}, res[r]), {\n              id: r\n            }));\n          }\n        }\n\n        return arr;\n      }));\n    }\n\n    addUser(user) {\n      return this.http.post(environment.apiUrl + this.table_name, user);\n    }\n\n    signUpUser(email, password) {\n      return this.http.post(environment.signUpUrl + environment.apikey, {\n        email: email,\n        password: password\n      });\n    }\n\n    loginUser(email, password) {\n      this.password = password;\n      return this.http.post(environment.signInUrl + environment.apikey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    autoLogin() {\n      if (localStorage.getItem('user')) {\n        const userData = JSON.parse(localStorage.getItem('user'));\n        const loadUser = new User(userData.email, userData.id, userData.dbUserId, userData._token, userData.type, new Date(userData._tokenExpirationDate));\n\n        if (loadUser.getToken()) {\n          this.user.next(loadUser);\n          const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n          this.autoLogout(expirationDuration);\n        }\n      }\n    }\n\n    handleError(errorRes) {\n      let errorMessage = 'An unkown error occure';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'Email address not found';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'Invalid password';\n          break;\n\n        case 'USER_DISABLED':\n          errorMessage = 'Account disabled';\n          break;\n      } //this.LogService.generateLog();\n\n\n      return throwError(errorMessage);\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      this.http.get(environment.apiUrl + this.table_name).pipe(map(res => {\n        const arr = [];\n\n        for (const r in res) {\n          if (res.hasOwnProperty(r)) {\n            arr.push(Object.assign(Object.assign({}, res[r]), {\n              id: r\n            }));\n          }\n        }\n\n        return arr;\n      })).subscribe(users => {\n        let u = users.find(o => o.email == email);\n\n        if (u.password == this.password) {\n          const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n          const user = new User(email, userId, u.id, token, u.type, expirationDate);\n          this.user.next(user);\n          this.autoLogout(expiresIn * 1000);\n          localStorage.setItem('user', JSON.stringify(user));\n\n          if (u.type == 'admin') {\n            this.router.navigate(['/admin']);\n          } else if (u.type == 'user') {\n            this.router.navigate(['/']);\n          }\n        }\n      });\n    }\n\n    logout() {\n      this.user.next(null);\n      localStorage.removeItem('user');\n\n      if (this.expirationTimer) {\n        clearTimeout(this.expirationTimer);\n      }\n\n      this.expirationTimer = null;\n    }\n\n    autoLogout(expirationDuration) {\n      this.expirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    getUsers() {\n      return this.http.get(environment.apiUrl + this.table_name).pipe(map(res => {\n        const arr = [];\n\n        for (const r in res) {\n          if (res.hasOwnProperty(r)) {\n            arr.push(Object.assign(Object.assign({}, res[r]), {\n              id: r\n            }));\n          }\n        }\n\n        return arr;\n      }));\n    }\n\n  }\n\n  ServiceService.ɵfac = function ServiceService_Factory(t) {\n    return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceService,\n    factory: ServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}